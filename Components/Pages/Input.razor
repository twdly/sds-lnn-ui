@page "/input"
@using lnn_ui.Services
@rendermode InteractiveServer

<div class="container">
    <h1>Cyclone Detector Input</h1>

    <div class="card">
        <form>
            <div class="form-group">
                <label>Latitude:</label>
                <input @bind="_lat" type="number" placeholder="Enter latitude" />
            </div>

            <div class="form-group">
                <label>Longitude:</label>
                <input @bind="_lon" type="number" placeholder="Enter longitude" />
            </div>

            <div class="form-group">
                <label>Wind:</label>
                <input @bind="_wind" type="number" placeholder="Enter wind speed" />
            </div>

            <div class="form-group">
                <label>Pressure:</label>
                <input @bind="_pres" type="number" placeholder="Enter pressure" />
            </div>

            <div class="form-group">
                <label>Gust:</label>
                <input @bind="_gust" type="number" placeholder="Enter gust speed" />
            </div>

            <div class="form-group">
                <label>Eye:</label>
                <input @bind="_eye" type="number" placeholder="Enter eye distance" />
            </div>

            <div class="form-group">
                <label>Speed:</label>
                <input @bind="_speed" type="number" placeholder="Enter speed" />
            </div>

            <button type="button" @onclick="SendInput" disabled="@IsSubmitDisabled">Submit Data</button>

            @if (!string.IsNullOrEmpty(_response))
            {
                <div class="response">
                    <p>Response was: @_response</p>
                </div>
            }
        </form>
    </div>
</div>

@code {
    float _lat;
    float _lon;
    float _wind;
    float _pres;
    float _gust;
    float _eye;
    float _speed;
    string _response = "";

    [Inject] DataInputService? InputService { get; set; }

    private async Task SendInput()
    {
        var currentTime = DateTime.Now;
        try
        {
            _response = await InputService!.SendInput(currentTime.Month, currentTime.Day, currentTime.Hour, _lat, _lon, _wind, _pres, _gust, _eye, _speed);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _response = $"Error: {ex.Message}. Please ensure all input values are correct and try again.";
            Console.WriteLine($"An error occurred while sending input data: {ex.Message}");
            StateHasChanged();
        }
    }

    private bool IsSubmitDisabled =>
        _lat == 0 || _lon == 0 || _wind == 0 || _pres == 0 || _gust == 0 || _eye == 0 || _speed == 0;
}